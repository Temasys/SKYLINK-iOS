<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SKYLINKMedia.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SKYLINKMedia</TokenIdentifier>
			<Abstract type="html">SKYLINKMediaDevice
@description The device type when you create a new media
@constant Microphone
@constant Front camera
@constant Back camera
@constant Screen
@constant Custom camera</Abstract>
			<DeclaredIn>SKYLINKMedia.h</DeclaredIn>
            
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SKYLINKMedia/skylinkMediaID</TokenIdentifier>
			<Abstract type="html">Get the mediaID of the SkylinkMedia object.</Abstract>
			<DeclaredIn>SKYLINKMedia.h</DeclaredIn>
			
			<Declaration>- (nonnull NSString *)skylinkMediaID</Declaration>
			
			<ReturnValue><Abstract type="html">The mediaID</Abstract></ReturnValue>
			<Anchor>//api/name/skylinkMediaID</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SKYLINKMedia/skylinkMediaType</TokenIdentifier>
			<Abstract type="html">Get the media type.</Abstract>
			<DeclaredIn>SKYLINKMedia.h</DeclaredIn>
			
			<Declaration>- (SKYLINKMediaType)skylinkMediaType</Declaration>
			
			<ReturnValue><Abstract type="html">The media type</Abstract></ReturnValue>
			<Anchor>//api/name/skylinkMediaType</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SKYLINKMedia/skylinkMediaState</TokenIdentifier>
			<Abstract type="html">Gte the current media state.</Abstract>
			<DeclaredIn>SKYLINKMedia.h</DeclaredIn>
			
			<Declaration>- (SKYLINKMediaState)skylinkMediaState</Declaration>
			
			<ReturnValue><Abstract type="html">The media state</Abstract></ReturnValue>
			<Anchor>//api/name/skylinkMediaState</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SKYLINKMedia/skylinkPreviousMediaState</TokenIdentifier>
			<Abstract type="html">Get the previous media state.</Abstract>
			<DeclaredIn>SKYLINKMedia.h</DeclaredIn>
			
			<Declaration>- (SKYLINKMediaState)skylinkPreviousMediaState</Declaration>
			
			<ReturnValue><Abstract type="html">The previous media state</Abstract></ReturnValue>
			<Anchor>//api/name/skylinkPreviousMediaState</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SKYLINKMedia/skylinkVideoTrack</TokenIdentifier>
			<Abstract type="html">Get the video track if this media is an video.</Abstract>
			<DeclaredIn>SKYLINKMedia.h</DeclaredIn>
			
			<Declaration>- (nullable RTCVideoTrack *)skylinkVideoTrack</Declaration>
			
			<ReturnValue><Abstract type="html">The video track, if this is media is a video</Abstract></ReturnValue>
			<Anchor>//api/name/skylinkVideoTrack</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SKYLINKMedia/skylinkAudioTrack</TokenIdentifier>
			<Abstract type="html">Get the audio track if this media is an audio.</Abstract>
			<DeclaredIn>SKYLINKMedia.h</DeclaredIn>
			
			<Declaration>- (nullable RTCAudioTrack *)skylinkAudioTrack</Declaration>
			
			<ReturnValue><Abstract type="html">The audio track, if this is media is an audio</Abstract></ReturnValue>
			<Anchor>//api/name/skylinkAudioTrack</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SKYLINKMedia/skylinkVideoView</TokenIdentifier>
			<Abstract type="html">The video view contained in the media.</Abstract>
			<DeclaredIn>SKYLINKMedia.h</DeclaredIn>
			
			<Declaration>- (nullable UIView *)skylinkVideoView</Declaration>
			
			<ReturnValue><Abstract type="html">The video view</Abstract></ReturnValue>
			<Anchor>//api/name/skylinkVideoView</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SKYLINKMedia/isVideo</TokenIdentifier>
			<Abstract type="html">Check if this SkylinkMedia represents a video.</Abstract>
			<DeclaredIn>SKYLINKMedia.h</DeclaredIn>
			
			<Declaration>- (BOOL)isVideo</Declaration>
			
			<ReturnValue><Abstract type="html">If this media is a video</Abstract></ReturnValue>
			<Anchor>//api/name/isVideo</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SKYLINKMedia/isCustom</TokenIdentifier>
			<Abstract type="html">Check if this SkylinkMedia is a custom video.</Abstract>
			<DeclaredIn>SKYLINKMedia.h</DeclaredIn>
			
			<Declaration>- (BOOL)isCustom</Declaration>
			
			<ReturnValue><Abstract type="html">If this media is a custom video</Abstract></ReturnValue>
			<Anchor>//api/name/isCustom</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SKYLINKMedia/skylinkMediaMetaData</TokenIdentifier>
			<Abstract type="html">This is a decription of the local media.</Abstract>
			<DeclaredIn>SKYLINKMedia.h</DeclaredIn>
			
			<Declaration>- (nullable id)skylinkMediaMetaData</Declaration>
			
			<ReturnValue><Abstract type="html">The label string</Abstract></ReturnValue>
			<Anchor>//api/name/skylinkMediaMetaData</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SKYLINKMedia/getCustomVideoCapturer</TokenIdentifier>
			<Abstract type="html">Get the custom video capturer.</Abstract>
			<DeclaredIn>SKYLINKMedia.h</DeclaredIn>
			
			<Declaration>- (nullable RTCCameraVideoCapturer *)getCustomVideoCapturer</Declaration>
			
			<ReturnValue><Abstract type="html">The custom video capturer or nil</Abstract></ReturnValue>
			<Anchor>//api/name/getCustomVideoCapturer</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
        
        
	</File>
</Tokens>